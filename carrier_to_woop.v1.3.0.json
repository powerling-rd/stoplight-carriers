{
  "openapi": "3.0.2",
  "info": {
    "title": "Carrier to Woop",
    "description": "First, all informations about Woop API headed to carriers are centralized in this documentation. If you need precisions or have any questions, please contact internal technical team.\n\nTo use the API, you need to take your access you got during the creation of your account on Woop platform.\n\nThe current offered version is <b>Version 1.3.0</b>",
    "version": "1.3.0"
  },
  "servers": [
    {
      "url": "car-api.recette.gcp.last-mile.fr",
      "description": "Staging URL"
    },
    {
      "url": "car-api.preprod.gcp.last-mile.fr",
      "description": "Pre-prod URL"
    },
    {
      "url": "carrier.last-mile.fr",
      "description": "Prod URL"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "description": "Check if application is operational.",
        "operationId": "getHealth",
        "responses": {
          "204": {
            "description": "Service is operational"
          }
        },
        "security": [],
        "summary": "Health"
      }
    },
    "/deliveries/{deliveryId}/status": {
      "put": {
        "description": "Allows updating an order status for an in progress delivery. The information is transmitted to Woop in order to follow the order process. <a href=\"https://woop.stoplight.io/docs/carrier/branches/english/docs/3.%20Models/Delivery-status.md\">Workflow and status list</a>",
        "operationId": "putDeliveryStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersion"
          },
          {
            "$ref": "#/components/parameters/pathDeliveryId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains the new delivery status informations",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "$ref": "#/components/schemas/deliveryStatus"
                  },
                  "date": {
                    "type": "string",
                    "format": "datetime"
                  },
                  "comment": {
                    "type": "string"
                  },
                  "team": {
                    "$ref": "#/components/schemas/team"
                  }
                },
                "required": [
                  "status",
                  "date",
                  "comment"
                ]
              },
              "examples": {
                "Delivery correctly delivered": {
                  "value": {
                    "status": "DELIVERY_DELIVERED_OK",
                    "date": "2019-11-27T10:30:00+0000",
                    "comment": "I waited 5 minutes outside.",
                    "team": {
                      "members": [
                        {
                          "id": "ZER784"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request processed with success"
          },
          "400": {
            "description": "Missing or incorrect element in body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequest"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "You are not allowed to access this element."
          },
          "403": {
            "description": "The status cannot be updated anymore."
          },
          "404": {
            "description": "The 'deliveryId' has not been found."
          }
        },
        "summary": "Delivery status update",
        "tags": [
          "Delivery"
        ]
      }
    },
    "/deliveries/{deliveryId}/packages/{packageId}/status": {
      "put": {
        "description": "Allows updating a package status for a precise order in progress. The information is transmitted to Woop in order to follow the package process. <a href=\"https://woop.stoplight.io/docs/carrier/branches/english/docs/3.%20Models/Delivery-status.md\">Workflow and status list</a>",
        "operationId": "putPackageStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersion"
          },
          {
            "$ref": "#/components/parameters/pathDeliveryId"
          },
          {
            "in": "path",
            "name": "packageId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Package ID"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains new informations about the order package status",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "$ref": "#/components/schemas/deliveryStatus"
                  },
                  "date": {
                    "type": "string",
                    "format": "datetime"
                  },
                  "comment": {
                    "type": "string"
                  },
                  "team": {
                    "$ref": "#/components/schemas/team"
                  }
                },
                "required": [
                  "status",
                  "date",
                  "comment"
                ]
              },
              "examples": {
                "Delivery correctly delivered": {
                  "value": {
                    "status": "DELIVERY_DELIVERED_OK",
                    "date": "2019-11-27T10:30:00+0000",
                    "comment": "I waited 5 minutes outside.",
                    "team": {
                      "members": [
                        {
                          "id": "ZER784"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request processed with success"
          },
          "400": {
            "description": "Missing or incorrect element in body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequest"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "You are not allowed to access this element."
          },
          "403": {
            "description": "The status can't be edited anymore"
          },
          "404": {
            "description": "The 'deliveryId' or 'packageId' has not been found"
          }
        },
        "summary": "Package status update",
        "tags": [
          "Delivery"
        ]
      }
    },
    "/deliveries/{deliveryId}/deltaCosts": {
      "put": {
        "tags": [
          "Delivery"
        ],
        "description": "Adding extra cost or discount on a delivery.",
        "operationId": "putDeliveryDeltaCosts",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersion"
          },
          {
            "$ref": "#/components/parameters/pathDeliveryId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains delta cost informations.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "amount",
                  "reason",
                  "currency",
                  "date"
                ],
                "properties": {
                  "amount": {
                    "type": "number",
                    "format": "float"
                  },
                  "reason": {
                    "$ref": "#/components/schemas/deltaCostReason"
                  },
                  "currency": {
                    "$ref": "#/components/schemas/currency"
                  },
                  "comment": {
                    "type": "string"
                  },
                  "date": {
                    "type": "string",
                    "format": "datetime"
                  }
                }
              },
              "examples": {
                "Late cancellation": {
                  "value": {
                    "amount": 165.98,
                    "currency": "EUR",
                    "reason": "DELTACOST_LATE_CANCELLATION",
                    "comment": "Order cancelled 5minutes before delivery.",
                    "date": "2019-11-27T10:30:00+0000"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request processed with success"
          },
          "400": {
            "description": "Missing or incorrect element in body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequest"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "You are not allowed to access this element."
          },
          "403": {
            "description": "Delta costs can't be sent anymore."
          },
          "404": {
            "description": "The 'deliveryId' has not been found"
          }
        },
        "summary": "Adding extra cost or discount on a delivery."
      }
    },
    "/deliveries/{deliveryId}/closure": {
      "post": {
        "tags": [
          "Delivery"
        ],
        "description": "Adding billing informations on a delivery.",
        "operationId": "postDeliveryClosure",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersion"
          },
          {
            "$ref": "#/components/parameters/pathDeliveryId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains billing informations.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "emittedCarbonDioxide",
                  "billedDistance",
                  "vehicleType"
                ],
                "properties": {
                  "emittedCarbonDioxide": {
                    "$ref": "#/components/schemas/mass"
                  },
                  "billedDistance": {
                    "$ref": "#/components/schemas/length"
                  },
                  "vehicleType": {
                    "$ref": "#/components/schemas/vehicleType"
                  }
                }
              },
              "examples": {
                "Example": {
                  "value": {
                    "emittedCarbonDioxide": {
                      "value": 13.5,
                      "unit": "mg"
                    },
                    "billedDistance": {
                      "value": 5,
                      "unit": "km"
                    },
                    "vehicleType": "VEHICLE_TYPE_SCOOTER"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request processed with success"
          },
          "400": {
            "description": "Missing or incorrect element in body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequest"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "You are not allowed to access this element."
          },
          "403": {
            "description": "Billing informations can't be sent anymore"
          },
          "404": {
            "description": "The 'deliveryId' has not been found"
          }
        },
        "summary": "Adding billing informations on a delivery."
      }
    },
    "/deliveries/{deliveryId}/events": {
      "post": {
        "tags": [
          "Delivery"
        ],
        "description": "Adding a delivery event.",
        "operationId": "postDeliveryEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersion"
          },
          {
            "$ref": "#/components/parameters/pathDeliveryId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains informations about the notification that will be sent.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "status",
                  "type",
                  "date",
                  "subject",
                  "message"
                ],
                "properties": {
                  "status": {
                    "type": "boolean",
                    "description": "'true' if event has been a success"
                  },
                  "type": {
                    "type": "string",
                    "description": "Notification type",
                    "enum": [
                      "EVENT_TYPE_SMS",
                      "EVENT_TYPE_MAIL",
                      "EVENT_TYPE_CALL"
                    ]
                  },
                  "date": {
                    "type": "string",
                    "description": "Event hour",
                    "format": "datetime"
                  },
                  "subject": {
                    "type": "string",
                    "description": "Event topic",
                    "enum": [
                      "DELIVERY_INIT",
                      "DELIVERY_STARTED",
                      "DELIVERY_PICK_UP_REACHED",
                      "DELIVERY_PICK_UP_OK",
                      "DELIVERY_IN_PROGRESS",
                      "DELIVERY_AT_DROP_OF_LOCATION",
                      "DELIVERY_PICK_UP_FAILED",
                      "DELIVERY_DELIVERED_WITH_CLAIM",
                      "DELIVERY_CANCELLED_WITH_RETURN",
                      "DELIVERY_FAILED_WITH_RETURN",
                      "DELIVERY_RETURNED_TO_PICK_UP",
                      "DELIVERY_DELIVERED_OK",
                      "DELIVERY_CANCELLED"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "Information message about the event"
                  },
                  "failReason": {
                    "type": "string",
                    "description": "Event failure reason"
                  }
                }
              },
              "examples": {
                "Example": {
                  "value": {
                    "status": true,
                    "type": "EVENT_TYPE_SMS",
                    "date": "2019-11-27T10:30:00+0000",
                    "subject": "DELIVERY_INIT",
                    "message": "Hi, your order has been confirmed."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request processed with success"
          },
          "400": {
            "description": "Missing or incorrect element in body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequest"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "You are not allowed to access this element."
          },
          "404": {
            "description": "The 'deliveryId' has not been found"
          }
        },
        "summary": "Adding a delivery event."
      }
    },
    "/deliveries/{deliveryId}/documents": {
      "post": {
        "tags": [
          "Document"
        ],
        "description": "Adding a document",
        "operationId": "postDeliveryDocument",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersion"
          },
          {
            "$ref": "#/components/parameters/pathDeliveryId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains informations about the document that will be sent.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "document": {
                    "type": "string",
                    "description": "Document in binary format, max 10 MB",
                    "format": "binary"
                  },
                  "type": {
                    "type": "string",
                    "description": "Document type",
                    "enum": [
                      "EVIDENCE",
                      "INVOICE",
                      "CONTRACT"
                    ]
                  },
                  "date": {
                    "type": "string",
                    "description": "Document creation date",
                    "format": "datetime"
                  }
                },
                "required": [
                  "document",
                  "type",
                  "date"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "document": "file stream",
                    "type": "EVIDENCE",
                    "date": "2019-11-27T10:30:00+0000"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request processed with success"
          },
          "400": {
            "description": "Missing or incorrect element in body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequest"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "You are not allowed to access this element."
          },
          "404": {
            "description": "The 'deliveryId' has not been found"
          }
        },
        "summary": "Adding a document on a delivery."
      }
    },
    "/subscriptions": {
      "post": {
        "description": "Initialization of endpoints to exchange with carrier APIs.",
        "operationId": "postSubscription",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersion"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Contains subscription informations",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "callbacks"
                ],
                "properties": {
                  "callbacks": {
                    "type": "object",
                    "required": [
                      "quote",
                      "delivery",
                      "cancelDelivery"
                    ],
                    "properties": {
                      "quote": {
                        "type": "object",
                        "required": [
                          "url"
                        ],
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "Route URL allowing getting quotes"
                          },
                          "version": {
                            "type": "string",
                            "description": "API version for this callback (see Woop to Carrier)",
                            "example": "1.4.0"
                          }
                        }
                      },
                      "delivery": {
                        "type": "object",
                        "required": [
                          "url"
                        ],
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "Route URL allowing validating a quote"
                          },
                          "version": {
                            "type": "string",
                            "description": "API version for this callback (see Woop to Carrier)",
                            "example": "1.4.0"
                          }
                        }
                      },
                      "cancelDelivery": {
                        "type": "object",
                        "required": [
                          "url"
                        ],
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "Route URL allowing delivery cancellation"
                          },
                          "version": {
                            "type": "string",
                            "description": "API version for this callback (see Woop to Carrier)",
                            "example": "1.4.0"
                          }
                        }
                      },
                      "cancelQuote": {
                        "type": "object",
                        "required": [
                          "url"
                        ],
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "Route URL allowing quote cancellation"
                          },
                          "version": {
                            "type": "string",
                            "description": "API version for this callback (see Woop to Carrier)",
                            "example": "1.4.0"
                          }
                        }
                      },
                      "score": {
                        "type": "object",
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "Route URL allowing providing the carrier rating for an order"
                          },
                          "version": {
                            "type": "string",
                            "description": "API version for this callback (see Woop to Carrier)",
                            "example": "1.4.0"
                          }
                        }
                      },
                      "pickupPoint": {
                        "type": "object",
                        "required": [
                          "url"
                        ],
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "Route URL allowing providing pickup points list"
                          },
                          "version": {
                            "type": "string",
                            "description": "API version for this callback (see Woop to Carrier)",
                            "example": "1.4.0"
                          }
                        }
                      },
                      "price": {
                        "type": "object",
                        "required": [
                          "url"
                        ],
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "Route URL allowing making a price request"
                          },
                          "version": {
                            "type": "string",
                            "description": "API version for this callback (see Woop to Carrier)",
                            "example": "1.4.0"
                          }
                        }
                      },
                      "label": {
                        "type": "object",
                        "required": [
                          "url"
                        ],
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "Route URL allowing generating & retrieving a label"
                          },
                          "version": {
                            "type": "string",
                            "description": "API version for this callback (see Woop to Carrier)",
                            "example": "1.4.0"
                          }
                        }
                      },
                      "status": {
                        "type": "object",
                        "required": [
                          "url"
                        ],
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "Route URL allowing getting status per 'package'"
                          },
                          "version": {
                            "type": "string",
                            "description": "API version for this callback (see Woop to Carrier)",
                            "example": "1.4.0"
                          }
                        }
                      },
                      "update": {
                        "type": "object",
                        "required": [
                          "url"
                        ],
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "Route URL allowing updating a delivery order"
                          },
                          "version": {
                            "type": "string",
                            "description": "API version for this callback (see Woop to Carrier)",
                            "example": "1.4.0"
                          }
                        }
                      }
                    }
                  },
                  "adapter": {
                    "type": "string",
                    "description": "Allows indicating service name in Woop platform to convert some data format of certain Carrier APIs.",
                    "example": "XMLAdapter"
                  },
                  "headers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "key",
                        "value"
                      ],
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "auth": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/postSubscriptionBasic"
                      },
                      {
                        "$ref": "#/components/schemas/postSubscriptionOAuth2"
                      },
                      {
                        "$ref": "#/components/schemas/postSubscriptionToken"
                      }
                    ]
                  }
                }
              },
              "examples": {
                "Basic": {
                  "value": {
                    "callbacks": {
                      "quote": {
                        "url": "https://my_url/quote",
                        "version": "1.4.0"
                      },
                      "delivery": {
                        "url": "https://my_url/delivery",
                        "version": "1.4.0"
                      },
                      "cancelDelivery": {
                        "url": "https://my_url/cancelDelivery",
                        "version": "1.4.0"
                      },
                      "cancelQuote": {
                        "url": "https://my_url/cancelQuote",
                        "version": "1.4.0"
                      },
                      "score": {
                        "url": "https://my_url/score",
                        "version": "1.4.0"
                      }
                    },
                    "headers": [
                      {
                        "key": "x-api-key",
                        "value": "KHJKO8U9"
                      }
                    ],
                    "auth": {
                      "basic": {
                        "username": "admin",
                        "password": "1234"
                      }
                    }
                  }
                },
                "OAuth2": {
                  "value": {
                    "callbacks": {
                      "quote": {
                        "url": "https://my_url/quote",
                        "version": "1.4.0"
                      },
                      "delivery": {
                        "url": "https://my_url/delivery",
                        "version": "1.4.0"
                      },
                      "cancelDelivery": {
                        "url": "https://my_url/cancelDelivery",
                        "version": "1.4.0"
                      },
                      "cancelQuote": {
                        "url": "https://my_url/cancelQuote",
                        "version": "1.4.0"
                      },
                      "score": {
                        "url": "https://my_url/score",
                        "version": "1.4.0"
                      },
                      "price": {
                        "url": "https://my_url/price",
                        "version": "1.4.0"
                      }
                    },
                    "auth": {
                      "oauth2": {
                        "client_id": "8664fb6e578be877cdd16e2c13e1db3e",
                        "client_secret": "4bb43097953c6d3ffae77b77f4716bba",
                        "audience": "carrier.last-mile.fr",
                        "grant_type": "client_credentials",
                        "tokenEndPoint": "token.last-mile.fr"
                      }
                    }
                  }
                },
                "Token": {
                  "value": {
                    "callbacks": {
                      "quote": {
                        "url": "https://my_url/quote",
                        "version": "1.4.0"
                      },
                      "delivery": {
                        "url": "https://my_url/delivery",
                        "version": "1.4.0"
                      },
                      "cancelDelivery": {
                        "url": "https://my_url/cancelDelivery",
                        "version": "1.4.0"
                      },
                      "cancelQuote": {
                        "url": "https://my_url/cancelQuote",
                        "version": "1.4.0"
                      },
                      "score": {
                        "url": "https://my_url/score",
                        "version": "1.4.0"
                      }
                    },
                    "auth": {
                      "token": {
                        "username": "admin",
                        "password": "1234",
                        "endpoint": "token.last-mile.fr"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request processed with success"
          },
          "400": {
            "description": "Missing or incorrect element in body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequest"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "reasons": [
                        "Missing argument 'xxxxx'"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "You are not allowed to access this element."
          }
        },
        "summary": "Adding subscriptions",
        "tags": [
          "Subscriptions"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "currency": {
        "type": "string",
        "enum": [
          "EUR"
        ],
        "title": "Currency (currency)",
        "description": "Currency, specify the used currency.",
        "x-examples": {
          "example": "EUR"
        }
      },
      "deliveryStatus": {
        "type": "string",
        "enum": [
          "DELIVERY_STARTED",
          "DELIVERY_PICK_UP_REACHED",
          "DELIVERY_PICK_UP_OK",
          "DELIVERY_PICK_UP_PARTIALLY",
          "DELIVERY_IN_PROGRESS",
          "DELIVERY_AT_DROP_OF_LOCATION",
          "DELIVERY_PICK_UP_FAILED",
          "DELIVERY_DELIVERED_WITH_CLAIM",
          "DELIVERY_CANCELLED_WITH_RETURN",
          "DELIVERY_FAILED_WITH_RETURN",
          "DELIVERY_RETURNED_TO_PICK_UP",
          "DELIVERY_DELIVERED_OK",
          "DELIVERY_DELIVERED_PARTIALLY",
          "DELIVERY_CANCELLED"
        ],
        "title": "Delivery status (deliveryStatus)",
        "description": "Specify the different possible delivery statuses in the platform.",
        "x-examples": {
          "example": "DELIVERY_STARTED"
        }
      },
      "deltaCostReason": {
        "type": "string",
        "enum": [
          "DELTACOST_EXTEND_WAITING_WAREHOUSE",
          "DELTACOST_EXTEND_WAITING_CUSTOMER",
          "DELTACOST_WRONG_FLOOR",
          "DELTACOST_WRONG_CONTENT",
          "DELTACOST_WAREHOUSE_RETURN",
          "DELTACOST_LATE_CANCELLATION",
          "DELTACOST_PICKUP_FAILED",
          "DELTACOST_PARTIALLY_DELIVERED",
          "DELTACOST_UNKNOWN"
        ],
        "title": "Reason for delta cost (deltaCostReason)",
        "x-examples": {
          "example": "DELTACOST_EXTEND_WAITING_WAREHOUSE"
        },
        "description": "Specify the carrier reason to create a delaCost."
      },
      "length": {
        "required": [
          "value",
          "unit"
        ],
        "properties": {
          "value": {
            "type": "number",
            "format": "float"
          },
          "unit": {
            "$ref": "#/components/schemas/lengthUnits"
          }
        },
        "title": "Dimension (length)",
        "description": "Specify the package dimensions.",
        "x-examples": {
          "example": {
            "value": 200,
            "unit": "mm"
          }
        }
      },
      "mass": {
        "required": [
          "value",
          "unit"
        ],
        "properties": {
          "value": {
            "type": "number",
            "format": "float"
          },
          "unit": {
            "$ref": "#/components/schemas/massUnits"
          }
        },
        "description": "Specify the weight of a package/product.",
        "title": "Weight (mass)",
        "x-examples": {
          "example": {
            "value": 1,
            "unit": "kg"
          }
        }
      },
      "lengthUnits": {
        "type": "string",
        "enum": [
          "mm",
          "cm",
          "m",
          "km",
          "in",
          "ft-us",
          "ft",
          "mi"
        ],
        "description": "Specify the length unit.",
        "title": "Length units (lengthUnits)",
        "x-examples": {
          "example": "mm"
        }
      },
      "massUnits": {
        "type": "string",
        "enum": [
          "mcg",
          "mg",
          "g",
          "kg",
          "oz",
          "lb",
          "mt",
          "t"
        ],
        "description": "Specify the weight units.",
        "title": "Weight units (massUnits)",
        "x-examples": {
          "example": "mcg"
        }
      },
      "postSubscriptionBasic": {
        "description": "Specify the way the Basic token for the subscription is generated.",
        "x-examples": {
          "example": {
            "basic": {
              "username": "string",
              "password": "string"
            }
          }
        },
        "title": "Subscription token (postSubscriptionBasic)",
        "type": "object",
        "properties": {
          "basic": {
            "type": "object",
            "description": "To be defined if the desired API authentication method is Basic",
            "properties": {
              "username": {
                "type": "string",
                "description": "User login used for the subscription"
              },
              "password": {
                "type": "string",
                "description": "User password used for the subscription"
              }
            },
            "required": [
              "username",
              "password"
            ]
          }
        }
      },
      "postSubscriptionOAuth2": {
        "title": "Subscription token (postSubscriptionOAuth2)",
        "description": "Specify the way the OAuth2 token for the subscription is generated.",
        "x-examples": {
          "example": {
            "oauth2": {
              "client_id": "string",
              "client_secret": "string",
              "audience": "string",
              "grant_type": "string",
              "tokenEndPoint": "string"
            }
          }
        },
        "type": "object",
        "properties": {
          "oauth2": {
            "type": "object",
            "description": "To be defined if the desired API authentication method is OAuth2",
            "properties": {
              "client_id": {
                "type": "string"
              },
              "client_secret": {
                "type": "string"
              },
              "audience": {
                "type": "string"
              },
              "grant_type": {
                "type": "string"
              },
              "tokenEndPoint": {
                "type": "string",
                "description": "URL allowing retrieving access token according to clientId and clientSecret"
              }
            },
            "required": [
              "client_id",
              "client_secret",
              "tokenEndPoint"
            ]
          }
        }
      },
      "postSubscriptionToken": {
        "type": "object",
        "title": "Subscription token (postSubscriptionToken)",
        "description": "Specify the way the Bearer token for the subscription is generated.",
        "properties": {
          "token": {
            "type": "object",
            "description": "To be defined if the authentication method gives a bearer from a username/password",
            "properties": {
              "username": {
                "type": "string",
                "description": "User login used for the subscription"
              },
              "password": {
                "type": "string",
                "description": "User password used for the subscription"
              },
              "endpoint": {
                "type": "string",
                "description": "URL allowing retrieving access token"
              }
            },
            "required": [
              "username",
              "password",
              "endpoint"
            ]
          }
        }
      },
      "team": {
        "type": "object",
        "description": "Specify the team in charge of the delivery",
        "title": "Crew (team)",
        "x-examples": {
          "example": {
            "members": [
              {
                "id": "012345"
              }
            ]
          }
        },
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID of team in charge of the delivery"
                }
              },
              "required": [
                "id"
              ]
            }
          }
        },
        "required": [
          "members"
        ]
      },
      "vehicleType": {
        "type": "string",
        "enum": [
          "VEHICLE_TYPE_BIKE",
          "VEHICLE_TYPE_SCOOTER",
          "VEHICLE_TYPE_E_SCOOTER",
          "VEHICLE_TYPE_VAN_SMALL",
          "VEHICLE_TYPE_E_VAN_SMALL",
          "VEHICLE_TYPE_VAN_MEDIUM",
          "VEHICLE_TYPE_PEDESTRIAN",
          "VEHICLE_TYPE_TRUCK",
          "VEHICLE_TYPE_VAN_BIG",
          "VEHICLE_TYPE_E_VAN_BIG",
          "VEHICLE_TYPE_BIKE_CARGO",
          "VEHICLE_TYPE_CAR",
          "VEHICLE_TYPE_E_CAR",
          "VEHICLE_TYPE_UNKNOWN"
        ],
        "description": "Specify the vehicle used during the delivery.",
        "title": "Vehicle type (vehicleType)",
        "x-examples": {
          "example": "VEHICLE_TYPE_BIKE"
        }
      },
      "badRequest": {
        "type": "object",
        "description": "Missing or incorrect element in body",
        "title": "Error 400",
        "x-examples": {
          "Example": {
            "reasons": [
              "Missing argument 'xxxxx'"
            ]
          }
        },
        "properties": {
          "reasons": {
            "type": "array",
            "description": "Specification on the error",
            "items": {
              "type": "string",
              "example": "Missing argument 'xxxxx'"
            }
          }
        }
      }
    },
    "parameters": {
      "apiVersion": {
        "in": "header",
        "name": "x-api-version",
        "required": false,
        "schema": {
          "type": "string",
          "example": "1.3.0"
        }
      },
      "pathDeliveryId": {
        "in": "path",
        "name": "deliveryId",
        "required": true,
        "schema": {
          "type": "string",
          "description": "Delivery ID"
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "oauth2",
        "flows": {},
        "description": "[Go to documentation](https://woop.stoplight.io/docs/carrier/branches/english/docs/2.%20Basics/Authentication.md)"
      }
    }
  },
  "tags": [
    {
      "name": "Delivery"
    },
    {
      "name": "Health"
    },
    {
      "name": "Document"
    },
    {
      "name": "Subscriptions"
    }
  ],
  "security": [
    {
      "Bearer": []
    }
  ]
}